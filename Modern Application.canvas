{
	"nodes":[
		{"id":"85f22b87610b6a2c","type":"group","x":3549,"y":3440,"width":1571,"height":1720,"label":"Spring Reactor (Details)"},
		{"id":"c4b87fb395abc5c2","type":"text","text":"## Concurrency\n\nConcept\n* vs Parallelism, Physically\n* Sync : Wait (eg. lock, sleep, system call)\n* Blocking : Context Switching, System Call(kernel), Wait I/O\n* I/O : Async, Deferred, Independent Chip(Register States)\n\nMultithreading\n* Thread Pool\n* Race Condition, Context Switch Overhead, OS Limit\n\nEvent Loop\n* Main Thread(Single), I/O Thread(Multi), Task Queue\n* Non-Blocking I/O (select, poll, epoll, JAVA NIO Selector/Channel)\n* Control Flow\n\t* Sync : Statement, Blocking\n\t* Async : Callback, Promise/Future, Function Composition","x":470,"y":520,"width":600,"height":540},
		{"id":"8a93ead0dfcc3ee6","type":"text","text":"## Corutine\n\n* Continuation(후속문), CPS, Language Support\n* Suspend/Resume, State Machine\n* Readable\n\nArticles\n* [후속문(Continuation) : 제1부. 개념과 call/cc](http://guruma.github.io/posts/2018-11-18-Continuation-Concept/)\n* [백엔드 개발자들이 알아야할 동시성 5 — Continuation Passing Style](https://choi-geonu.medium.com/%EB%B0%B1%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%93%A4%EC%9D%B4-%EC%95%8C%EC%95%84%EC%95%BC%ED%95%A0-%EB%8F%99%EC%8B%9C%EC%84%B1-5-continuation-passing-style-5058ab5cb781)\n* [코루틴 소개](https://medium.com/@jooyunghan/%EC%BD%94%EB%A3%A8%ED%8B%B4-%EC%86%8C%EA%B0%9C-504cecc89407)\n* [suspend 함수 원리 및 CPS(Continuation Passing Style)](https://seosh817.tistory.com/348)","x":880,"y":1240,"width":560,"height":340},
		{"id":"90dadace16dcb837","type":"text","text":"## OS\n\n* Time Sharing, Scheduling(Context Switch, Register States)\n* Address Spaces, Paging, Copy On Write\n* I/O, Interrupt, Non-Blocking(Sync/Async, Multiplexing)\n* Thread, Concurrency, Lock(Atomic Instruction, CAS)","x":517,"y":209,"width":506,"height":211},
		{"id":"9bbad72c4d53c1ee","type":"text","text":"## Environments\n\nHardware\n* Multi-core Processor, Parallelism\n* False Sharing(L1/L2 vs L3 Cache)\n\nScale of Internet\n* Global, Mobile, IoT\n* Big Data","x":-40,"y":159,"width":330,"height":311},
		{"id":"038ef83a7e66614f","type":"text","text":"## Functional Programing\n\n* Function Composition : Functor(`map`), Monad(`flatMap`), Generic Operations\n* Immutable : Transparency (Easy to Schedule)\n* Lazy : Handle Async (Future, Promise)\n* Closure : Function with All Environment at Creation Time, Scope Chain\n\nArticles\n* [(번역) Functor and monad examples in plain Java](https://medium.com/@jooyunghan/functor-and-monad-examples-in-plain-java-9ea4d6630c6)\n* [Monads](https://slideplayer.com/slide/13941591/)\n* [Applicative Functor](https://dev.to/ingun37/applicative-functor-4ddc)\n* [Closure](https://poiemaweb.com/js-closure)","x":40,"y":1240,"width":681,"height":360},
		{"id":"2e174b230ce9a249","type":"text","text":"## Reactive\n\nConcept\n* Responsive (Reliability)\n* Resilient (Fault-Tolerance)\n* Elastic (Scalable)\n* Message Driven\n\nReactive Programing\n* Handle ***Event Stream*** using Functional Programming Style\n* Event Driven (Short Term)\n* Publisher, Subscriber, Subscription(Backpressure)\n* Mono/Flux(Spring Reactor), Observable(RxJava)\n\nReactive System\n* Message Driven (Long Term)","x":80,"y":1720,"width":601,"height":486},
		{"id":"aaf1f4491fb3cb45","type":"text","text":"## Microservice\n\nMonolithic Harm\n* Coupling\n* Slow Development, Hard to Test\n* Legacy Versions of Dependencies\n\nIPC (Inter Process Communication)\n* Mashup\n* Async, Distributed, Network Latency, I/O Bound","x":-760,"y":680,"width":460,"height":330},
		{"id":"225c065c188768ea","type":"text","text":"## Reactor Pattern\n\nConcept\n* I/O Demultiplexing + Event Dispatch\n* Isolate between Reactor and EventHandler\n* Reactor, Selector\n* Acceptor, EventHandler","x":1304,"y":520,"width":436,"height":258},
		{"id":"3265869955ee7e51","type":"text","text":"## Proactor Pattern","x":1304,"y":860,"width":436,"height":218},
		{"id":"e8cd357ba577caec","type":"text","text":"## Java Support FP\n\nCompletableFuture\n* `completedFuture(?)`, `completeOnTime(?, long, TimeUnit)`, `completeExceptionally(Throwable)`\n* `supplyAsync(Supplier, Executor)`\n* `thenApply(Function)`, `thenAccept(Consumer)`, `thenRun(Runnable)`\n* `thenCompose(Function<?, CompletableFuture<?>>)`\n* `thenCombine(CompletableFuture, BiFunction)`\n* `allOf(CompletableFuture...)`, `anyOf(CompletableFuture...)`\n\nStream\n* ...\n\nOptional\n* ...","x":2480,"y":1238,"width":794,"height":482},
		{"id":"accee0872279eba8","type":"text","text":"## Java\n\nJava 8\n* Lambda, `@FunctionalInterface`, Method Reference\n* Stream, Optional, Collectors, parallel()\n* DateTime API\n* Interface Default Method\n\nJava 9\n* HttpClient\n* Collection Factory\n* Interface Private Method\n\nJava 10\n* `var` for Local Variable\n\nJava 13\n* ZGC as Default\n\nJava 14\n* Switch Expression : `switch(...) case ... -> ...; case ... ->  { ... yield ... }`\n\nJava 15\n* Multi Line String\n\nJava 16\n* Type Pattern Matching (`instanceof`)\n* Record\n\nJava 17\n* Sealed Class (`permits`)\n\nJava 18\n* HttpServer\n\t* `create(InetSocketAddress ip_port)`\n\t* `contextPath(String path, HttpHandler handler)`\n\t* `start()`\n\nJava 21\n* Virtual Thread\n* Record Pattern Matching\n* SequencedCollection\n* String Template","x":2507,"y":-292,"width":740,"height":1220},
		{"id":"cf377f4c41855d76","type":"text","text":"## Spring Reactor\n\nConcept\n* Mono[0,1], Flux[0, n]\n\n","x":2580,"y":3440,"width":680,"height":160},
		{"id":"61be40371a50d3cf","type":"text","text":"## Garbage Collection\n\nConcept\n* Mark, Sweep (and Compact)\n\nG1GC\n* for Real Time System, Low STW, Try to Fit Configured STW Time \n* Search Regions Include Most Unused Objects (Garbage First)\n* Region : Same Size Heap Memory\n* Minor(Young), Mixed()\n* Eviction and Compact\n* Remember Set(Old -> Young), Collection Set\n* Initial Mark(STW) -> \n* Articles\n\t* \n\nZGC\n* Various Region Size (Small, Medium, Heterogeneous)\n* Safe Update Reference","x":3400,"y":38,"width":573,"height":560},
		{"id":"ff53c0a27e95debe","type":"text","text":"## Netty\n\n* Network Framework with Async Event Loop, Light-weight\n* `EventLoopGroup`\n\t* Spread Tasks to Each EventLoop (round robin)\n\t* `execute()` = Non I/O Task\n* `NIOEventLoop`\n\t* `EventExcutor` : Worker Thread (or Pool)\n\t* `TaskQueue` : I/O Task, Non I/O Task\n\t* `Selector` : I/O Multiplexing\n\t* `setIoRatio()`\n* `Channel`\n\t* `AbstractChannel` : `ChannelPipeline`\n\t* `AbstractNioChannel` : `Selector`, `SelectalbeChannel`\n\t* `ChannelFuture`: add/remove `FutureListener`\n* `ChannelPipeline`\n\t* Linked List of `ChannelHandlerContext`\n\t* `EventExecutor(optional)` + `ChannelHandler`\n\t* `next()`= inbound\n\t\t* `fireChannelRead()`\n\t* `prev()` = outbound\n\t\t* `writeAndFlush()`\n* `ChannelHandler`\n\t* `InboundHandler`\n\t\t* channelRegistered() -> channelActive()\n\t\t* -> channelRead() -> channelReadComplete()\n\t\t* -> channelInactive() -> channelUnregistered()\n\t* `OutboundHandler`\n\t\t* write() -> flush() -> close()\n\t* `DuplexHandler`\n* `Codec`\n\t* Decoder(`InboundHandler`), Encoder(`OutboundHandler`)\n\t* Message(`Object`) or Byte(`ByteBuf`, `byte[]`)\n\t* `@Sharable` : Thread Safe\n* `ServerBootstrap`\n\t* Configuration of Netty\n\t* `group()` : parentGroup, childGroup\n\t* `channel()`: channel class\n\t* `childHandler()` : ChannelInitializer (on connect SocketChannel)\n\t* `bind()` : `ChannelFuture`","x":1840,"y":520,"width":600,"height":1100},
		{"id":"b0de65d868d173d5","type":"text","text":"## Java Flow\n\nReactive Streams API Spec\n\nComponents\n* `Publisher` : Data Source\n* `Subscriber` : Handler\n* `Processor` : `Subscriber` + `Publisher`\n* `Subscription` : Back-pressure\n\nEvents\n* `onSubscribe(Subscription)`\n* `onNext(T)`\n* `onComplete()`\n* `onError(Throwable)`","x":1720,"y":2900,"width":440,"height":440},
		{"id":"3374bdee0cc75026","type":"text","text":"## Spring WebFlux\n\n### ReactiveAdapter\n* Reactive Library's Type to `Publisher`. `Publisher` can used by `Mono`, `Flux`\n* `ReactiveAdapterRegistry`, `XxxRegistrar`\n* `registerReactiveType(TypeDescriptor, Func<Object, Publisher>, Func<Publisher, Object))`\n\n### Reactor Netty\n\n`HttpServer`\n* `WebFluxAutoConfiguration`\n* -> `ReactiveWebServerFactoryConfiguration.EmbeddedNetty`\n* -> `NettyReactiveWebServerFactory`","x":2440,"y":2320,"width":940,"height":440},
		{"id":"6cc9b00f63a1da76","type":"text","text":"### Operators\n\n* `map()`, `mapNotNull()`, `filter()`, `flatMap()`\n* `take(int)`, `taskLast(int)`, `skip(int)`, `skipLast(int)`\n* `collectList()`\n* `cache()`\n* `doOnSubscribe(Subscription)`, `doOnRequest(int)`, `doOnNext(T)`, `doOnComplete()`, `doOnError(Throwable)`","x":4271,"y":4860,"width":620,"height":240},
		{"id":"22ab337f3dfdf3f6","type":"text","text":"## Context\n\n* `ContextView`, `Context.of(k1, v1, ...)`\n* `Publiher.contextWrite(Function<Context, Context>)`\n* `Publisher.deferContextual(Function<Context, Mono<T>>)`","x":4271,"y":4600,"width":620,"height":200},
		{"id":"02627bfa5df20193","type":"text","text":"### Error\n\nConcept\n* `onErrorDropped(Throwable, Context)`\n\t* `Context.get(Hooks.KEY_ON_ERROR_DROPPED)`\n\t* `Hooks.onErrorDroppedHook`\n\t* `log.error(\"Operator called default onErrorDropped\", e)`\n* `onErrorReturn(T)` : Run and Fixed Value at Building Stream\n* `onErrorComplete()`\n* `onErrorResume(Function<Throwable, Publisher<T>)`\n\t* `e -> Mono.just(buildError())`\n* `onErrorMap(Function<T1, T2>)`\n* `doOnError(Consumer<T>)` : for Logging","x":4259,"y":4140,"width":611,"height":413},
		{"id":"f4bc5d5bff82c990","type":"text","text":"### Schedulers\n\n`subscribeOn(Scheduler)`\n* Define First Thread of Stream (Source)\n* `immediate()` : Thread of to call `subscribe()`\n* `single()` : Cached Single Thread\n* `parallel()` : Number of CPU\n* `boundedElastic()` : Cached Bounded Thread Pool (max 60s, CPUs * 10)\n* `newXxx(String)` : `dispose()`\n* `fromExecutorService(ExecutorService)`\n\n`publishOn(Scheduler)`\n* Change Running Thread of After Stream","x":3580,"y":4140,"width":639,"height":403},
		{"id":"81a54841417a9f4a","type":"text","text":"### Compose\n\nConcept\n* `delayElements(Duration)`\n* `Flux.concat(Publisher...)` : Ordered, after `onComplete()`\n* `Flux.merge(Publisher...)` : Not Ordered, Immediate Subscribe\n* `Flux.mergeSequential(Publisher...)` : Ordered, Immediate Subscribe\n","x":3580,"y":4593,"width":639,"height":247},
		{"id":"953d3d785adce723","type":"text","text":"### Subscribe\n\nBasic\n* `subscribe()` + `doOnNext(Consummer<T>)`\n* `subscribe(Consummer<T>, Consummer<Throwable>, Runnable, Context)`\n* `subscribe(Subscriber)`\n\t* for Back-pressure\n\n`BaseSubscriber`\n* use `hookOnXxx()`\n* In outside of subscriber, to call `request(int)` and `cancel()`\n\nRequest\n* Unbounded\n\t* `block()`, `blockFirst()`, `blockLast()`\n\t* `toIterable()`, `toStream()`\n* Bounded\n\t* `Publisher.buffer(int)`\n\t* `Publisher.take(int, limitRequest = true)`","x":3580,"y":3520,"width":700,"height":580},
		{"id":"6a4a1e606a7da028","type":"text","text":"### Publisher\nPublisher (Mono)\n* `just(T...)`, `error(Throwable)`, `empty()`\n* `fromCallable()`, `fromFuture()`, `fromSupplier()`, `fromRunnable()`\n\nPublisher (Flux)\n* `fromIterable()`, `fromStream()`, `fromArray()`, `range(int start, int n)`\n* Sequence\n\t* `Sink<T>`\n\t\t* `next(T)`, `complete()`, `error(Throwable)`\n\t\t* `SynchronousSink<T>`, `FluxSink<T>`\n\t* `generate(Callable<S>, BiFunction<S, SynchronousSink<T>, S>)`\n\t* `create(Consumer<FluxSink<T> emitter)`\n\t\t* Multiple `next(T)`, Thread Safe\n\t* `handle(BiConsumer<T, SynchronousSink<R>> handler)`","x":4320,"y":3520,"width":711,"height":480},
		{"id":"91852b3bc02a55c5","x":3793,"y":2560,"width":827,"height":660,"type":"text","text":"### WebHandler\n\n`WebHandler`\n* `WebHandler.handle(ServerWebExchange)`\n* `WebHttpHandlerBuilder.webHandler().build()`\n* `ServerWebExchange`\n\t* `getFormData(): Mono<MultiValueMap>`\n\t* `getMultipartData(): Mono<MultiValueMap<String, Part>>`\n\t\t* `FormFiledPart`: `value()`\n\t\t* `FilePart`: `transferTo(Path)`, `filename()`\n\t* `getApplicationContext()`\n\t* `getRequest()`, `getResponse()`\n\nHttpWebHandlerAdapter\n* `createExchange(ServerHttpRequest, ServerHttpReponse)`\n\t* -> `DefaultServerWebExchange.initFormData()`\n\t* -> `DefaultServerWebExchange.initMultipartData()`\n\t\t* -> `HttpMessageReader.readMono(ServerHttpRequest, ...)`\n* -> `WebFilter`\n* -> `WebHandler`\n* -> `WebExceptionHandler` -> `handleUnresolvedError()`\n* `CodecConfigurer"},
		{"id":"a3fbe9d8c9d7651e","x":3793,"y":1800,"width":887,"height":680,"type":"text","text":"### HttpHandler\n\n`HttpHandler`\n* `HttpHandler.handle(ServerHttpRequest, ServerHttpResponse): Mono<Void>`\n* `ReactorHttpHandlerAdapter(HttpHandler)`\n* `ServerHttpRequest`\n\t* `getPath()`, `getQueryParams()`, `getCookies()`, `mutate(): Builder`\n\t* -> `ReactiveHttpInputMessage` : `getBody(): Flux<DataBuffer>`\n\t* -> `HttpRequest` : `getMethod()`, `getURI()`\n\t\t* URI = scheme + schemeSpecificPart( authority(userInfo, host, port), path, query, fragment )\n\t\t* `RequestPath.parse(URI, contextPath: String)`\n\t\t* -> `HttpMessage` : `getHeaders()`\n* `ServerHttpResponse`\n\t* `setStatusCode(HttpStatus)`, `addCookie()`\n\t\t* `ResponseCookie.from(K,V).build()`\n\t* -> `ReactiveHttpOutputMessage` : `writeWith(Publisher<DataBuffer>)`, `setComplete()`\n\t\t* `bufferFactory.wrap(byte[]): Mono<DataBuffer>`\n\t\t* -> `HttpMessage` : `getHeaders()`\n\n`ReactorHttpHandlerAdapter`"},
		{"id":"0b34acdc45ad679f","x":4794,"y":2840,"width":746,"height":480,"type":"text","text":"### CodecConfigurer\n\nType Decoder\n* ByteArray, ByteBuffer(java.nio), DataBuffer, NettyByteBuf, Protobuf\n* Resource (Spring Resource), String\n* Jackson2Json: DataBuffer to Object\n\nServer Reader\n* FormHttpMessage : MultiValueMap<String, String>\n* DefaultPartHttpMessage : Stream<Part>\n* MultipartHttpMessage : MultiValueMap<String, Part>\n\nObject Decoder\n* KotlinSerializationJson : kotlinx.serialization\n* Jaskcon2Smile\n* Jaxb2Xml\n\n"},
		{"id":"98b9bd18e7bce6c2","x":4857,"y":2340,"width":743,"height":420,"type":"text","text":"### HttpHandlerAutoCnofiguration\n\n* HttpHandlerAutoCnofiguration.httpHandler(WebFluxProps)\n\t* -> WebHttpHandlerBuilder(ApplicationContext)\n\t\t* ApplicationContext.getBean(\"webHandler\") : Mandatory\n\t\t* `List<WebFilter>`, `List<WebExceptionHandler>`\n\t\t* `WebSessionManager` (default: `InMemoryWebSessionStore`)\n\t\t* `ServerCodecConfigurer`, `LocaleContextResolver`\n\t\t* `ForwardedHeaderTransformer` : Handle XFF"}
	],
	"edges":[
		{"id":"f5261747bfc3b6af","fromNode":"9bbad72c4d53c1ee","fromSide":"right","toNode":"90dadace16dcb837","toSide":"left"},
		{"id":"a93e68e9b466529e","fromNode":"90dadace16dcb837","fromSide":"bottom","toNode":"c4b87fb395abc5c2","toSide":"top"},
		{"id":"4ea4cf29e3201213","fromNode":"c4b87fb395abc5c2","fromSide":"bottom","toNode":"8a93ead0dfcc3ee6","toSide":"top"},
		{"id":"6125f8743963e280","fromNode":"c4b87fb395abc5c2","fromSide":"bottom","toNode":"038ef83a7e66614f","toSide":"top"},
		{"id":"790e28e81cc77f2b","fromNode":"038ef83a7e66614f","fromSide":"bottom","toNode":"2e174b230ce9a249","toSide":"top"},
		{"id":"aa8962336d6d3269","fromNode":"9bbad72c4d53c1ee","fromSide":"bottom","toNode":"aaf1f4491fb3cb45","toSide":"right"},
		{"id":"92acfad31d605ff9","fromNode":"2e174b230ce9a249","fromSide":"left","toNode":"aaf1f4491fb3cb45","toSide":"right"},
		{"id":"e790ce0ad8aebd58","fromNode":"90dadace16dcb837","fromSide":"right","toNode":"accee0872279eba8","toSide":"left"},
		{"id":"bfca57ec44c18d89","fromNode":"accee0872279eba8","fromSide":"right","toNode":"61be40371a50d3cf","toSide":"left"},
		{"id":"ba078d9efa9a92bd","fromNode":"accee0872279eba8","fromSide":"bottom","toNode":"e8cd357ba577caec","toSide":"top"},
		{"id":"f5d7860ae49c7691","fromNode":"c4b87fb395abc5c2","fromSide":"right","toNode":"225c065c188768ea","toSide":"left"},
		{"id":"01f719ae29f75c2e","fromNode":"c4b87fb395abc5c2","fromSide":"right","toNode":"3265869955ee7e51","toSide":"left"},
		{"id":"a07daa2190250f71","fromNode":"225c065c188768ea","fromSide":"right","toNode":"ff53c0a27e95debe","toSide":"left"},
		{"id":"430d47712b586f88","fromNode":"cf377f4c41855d76","fromSide":"top","toNode":"3374bdee0cc75026","toSide":"bottom"},
		{"id":"450904994c00bc45","fromNode":"2e174b230ce9a249","fromSide":"right","toNode":"b0de65d868d173d5","toSide":"left"},
		{"id":"dd393f22d9052953","fromNode":"ff53c0a27e95debe","fromSide":"bottom","toNode":"3374bdee0cc75026","toSide":"left"},
		{"id":"bb0f3092abec75a6","fromNode":"b0de65d868d173d5","fromSide":"right","toNode":"cf377f4c41855d76","toSide":"left"},
		{"id":"0ff23b702f245873","fromNode":"cf377f4c41855d76","fromSide":"right","toNode":"85f22b87610b6a2c","toSide":"left"},
		{"id":"263c1625e0796e58","fromNode":"3374bdee0cc75026","fromSide":"right","toNode":"91852b3bc02a55c5","toSide":"left"},
		{"id":"87085b1c77d63f38","fromNode":"3374bdee0cc75026","fromSide":"right","toNode":"a3fbe9d8c9d7651e","toSide":"left"},
		{"id":"06b538cb9fe53964","fromNode":"91852b3bc02a55c5","fromSide":"right","toNode":"0b34acdc45ad679f","toSide":"left"},
		{"id":"11908723a200b181","fromNode":"91852b3bc02a55c5","fromSide":"right","toNode":"98b9bd18e7bce6c2","toSide":"left"}
	]
}