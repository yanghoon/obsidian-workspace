{
	"nodes":[
		{"id":"c4b87fb395abc5c2","type":"text","text":"## Concurrency\n\nConcept\n* vs Parallelism, Physically\n* Sync : Wait (eg. lock, sleep, system call)\n* Blocking : Context Switching, System Call(kernel), Wait I/O\n* I/O : Async, Deferred, Independent Chip(Register States)\n\nMultithreading\n* Thread Pool\n* Race Condition, Context Switch Overhead, OS Limit\n\nEvent Loop\n* Main Thread(Single), I/O Thread(Multi), Task Queue\n* Non-Blocking I/O (select, poll, epoll, JAVA NIO Selector/Channel)\n* Control Flow\n\t* Sync : Statement, Blocking\n\t* Async : Callback, Promise/Future, Function Composition","x":470,"y":520,"width":600,"height":540},
		{"id":"8a93ead0dfcc3ee6","type":"text","text":"## Corutine\n\n* Continuation(후속문), CPS, Language Support\n* Suspend/Resume, State Machine\n* Readable\n\nArticles\n* [후속문(Continuation) : 제1부. 개념과 call/cc](http://guruma.github.io/posts/2018-11-18-Continuation-Concept/)\n* [백엔드 개발자들이 알아야할 동시성 5 — Continuation Passing Style](https://choi-geonu.medium.com/%EB%B0%B1%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%93%A4%EC%9D%B4-%EC%95%8C%EC%95%84%EC%95%BC%ED%95%A0-%EB%8F%99%EC%8B%9C%EC%84%B1-5-continuation-passing-style-5058ab5cb781)\n* [코루틴 소개](https://medium.com/@jooyunghan/%EC%BD%94%EB%A3%A8%ED%8B%B4-%EC%86%8C%EA%B0%9C-504cecc89407)\n* [suspend 함수 원리 및 CPS(Continuation Passing Style)](https://seosh817.tistory.com/348)","x":880,"y":1240,"width":560,"height":340},
		{"id":"90dadace16dcb837","type":"text","text":"## OS\n\n* Time Sharing, Scheduling(Context Switch, Register States)\n* Address Spaces, Paging, Copy On Write\n* I/O, Interrupt, Non-Blocking(Sync/Async, Multiplexing)\n* Thread, Concurrency, Lock(Atomic Instruction, CAS)","x":517,"y":209,"width":506,"height":211},
		{"id":"9bbad72c4d53c1ee","type":"text","text":"## Environments\n\nHardware\n* Multi-core Processor, Parallelism\n* False Sharing(L1/L2 vs L3 Cache)\n\nScale of Internet\n* Global, Mobile, IoT\n* Big Data","x":-40,"y":159,"width":330,"height":311},
		{"id":"038ef83a7e66614f","type":"text","text":"## Functional Programing\n\n* Function Composition : Functor(`map`), Monad(`flatMap`), Generic Operations\n* Immutable : Transparency (Easy to Schedule)\n* Lazy : Handle Async (Future, Promise)\n* Closure : Function with All Environment at Creation Time, Scope Chain\n\nArticles\n* [(번역) Functor and monad examples in plain Java](https://medium.com/@jooyunghan/functor-and-monad-examples-in-plain-java-9ea4d6630c6)\n* [Monads](https://slideplayer.com/slide/13941591/)\n* [Applicative Functor](https://dev.to/ingun37/applicative-functor-4ddc)\n* [Closure](https://poiemaweb.com/js-closure)","x":40,"y":1240,"width":681,"height":360},
		{"id":"2e174b230ce9a249","type":"text","text":"## Reactive\n\nConcept\n* Responsive (Reliability)\n* Resilient (Fault-Tolerance)\n* Elastic (Scalable)\n* Message Driven\n\nReactive Programing\n* Handle ***Event Stream*** using Functional Programming Style\n* Event Driven (Short Term)\n* Publisher, Subscriber, Subscription(Backpressure)\n* Mono/Flux(Spring Reactor), Observable(RxJava)\n\nReactive System\n* Message Driven (Long Term)","x":80,"y":1720,"width":601,"height":486},
		{"id":"aaf1f4491fb3cb45","type":"text","text":"## Microservice\n\nMonolithic Harm\n* Coupling\n* Slow Development, Hard to Test\n* Legacy Versions of Dependencies\n\nIPC (Inter Process Communication)\n* Mashup\n* Async, Distributed, Network Latency, I/O Bound","x":-760,"y":680,"width":460,"height":330},
		{"id":"cf377f4c41855d76","x":1900,"y":1840,"width":794,"height":280,"type":"text","text":"## Spring Reactor\n\nConcept\n* Mono[0,1], Flux[0, n]"},
		{"id":"225c065c188768ea","x":1304,"y":520,"width":436,"height":258,"type":"text","text":"## Reactor Pattern\n\nConcept\n* I/O Demultiplexing + Event Dispatch\n* Isolate between Reactor and EventHandler\n* Reactor, Selector\n* Acceptor, EventHandler"},
		{"id":"e8cd357ba577caec","type":"text","text":"## Java Support FP\n\nCompletableFuture\n* `completedFuture(?)`, `completeOnTime(?, long, TimeUnit)`, `completeExceptionally(Throwable)`\n* `supplyAsync(Supplier, Executor)`\n* `thenApply(Function)`, `thenAccept(Consumer)`, `thenRun(Runnable)`\n* `thenCompose(Function<?, CompletableFuture<?>>)`\n* `thenCombine(CompletableFuture, BiFunction)`\n* `allOf(CompletableFuture...)`, `anyOf(CompletableFuture...)`\n\nStream\n* ...\n\nOptional\n* ...","x":1900,"y":1238,"width":794,"height":482},
		{"id":"accee0872279eba8","type":"text","text":"## Java\n\nJava 8\n* Lambda, `@FunctionalInterface`, Method Reference\n* Stream, Optional, Collectors, parallel()\n* DateTime API\n* Interface Default Method\n\nJava 9\n* HttpClient\n* Collection Factory\n* Interface Private Method\n\nJava 10\n* `var` for Local Variable\n\nJava 13\n* ZGC as Default\n\nJava 14\n* Switch Expression : `switch(...) case ... -> ...; case ... ->  { ... yield ... }`\n\nJava 15\n* Multi Line String\n\nJava 16\n* Type Pattern Matching (`instanceof`)\n* Record\n\nJava 17\n* Sealed Class (`permits`)\n\nJava 18\n* HttpServer\n\t* `create(InetSocketAddress ip_port)`\n\t* `contextPath(String path, HttpHandler handler)`\n\t* `start()`\n\nJava 21\n* Virtual Thread\n* Record Pattern Matching\n* SequencedCollection\n* String Template","x":1927,"y":-292,"width":740,"height":1220},
		{"id":"61be40371a50d3cf","type":"text","text":"## Garbage Collection\n\nConcept\n* Mark, Sweep (and Compact)\n\nG1GC\n* for Real Time System, Low STW, Try to Fit Configured STW Time \n* Search Regions Include Most Unused Objects (Garbage First)\n* Region : Same Size Heap Memory\n* Minor(Young), Mixed()\n* Eviction and Compact\n* Remember Set(Old -> Young), Collection Set\n* Initial Mark(STW) -> \n* Articles\n\t* \n\nZGC\n* Various Region Size (Small, Medium, Heterogeneous)\n* Safe Update Reference","x":2820,"y":38,"width":573,"height":560},
		{"id":"3265869955ee7e51","x":1304,"y":860,"width":436,"height":218,"type":"text","text":"## Proactor Pattern"}
	],
	"edges":[
		{"id":"f5261747bfc3b6af","fromNode":"9bbad72c4d53c1ee","fromSide":"right","toNode":"90dadace16dcb837","toSide":"left"},
		{"id":"a93e68e9b466529e","fromNode":"90dadace16dcb837","fromSide":"bottom","toNode":"c4b87fb395abc5c2","toSide":"top"},
		{"id":"4ea4cf29e3201213","fromNode":"c4b87fb395abc5c2","fromSide":"bottom","toNode":"8a93ead0dfcc3ee6","toSide":"top"},
		{"id":"6125f8743963e280","fromNode":"c4b87fb395abc5c2","fromSide":"bottom","toNode":"038ef83a7e66614f","toSide":"top"},
		{"id":"790e28e81cc77f2b","fromNode":"038ef83a7e66614f","fromSide":"bottom","toNode":"2e174b230ce9a249","toSide":"top"},
		{"id":"aa8962336d6d3269","fromNode":"9bbad72c4d53c1ee","fromSide":"bottom","toNode":"aaf1f4491fb3cb45","toSide":"right"},
		{"id":"92acfad31d605ff9","fromNode":"2e174b230ce9a249","fromSide":"left","toNode":"aaf1f4491fb3cb45","toSide":"right"},
		{"id":"e790ce0ad8aebd58","fromNode":"90dadace16dcb837","fromSide":"right","toNode":"accee0872279eba8","toSide":"left"},
		{"id":"bfca57ec44c18d89","fromNode":"accee0872279eba8","fromSide":"right","toNode":"61be40371a50d3cf","toSide":"left"},
		{"id":"ba078d9efa9a92bd","fromNode":"accee0872279eba8","fromSide":"bottom","toNode":"e8cd357ba577caec","toSide":"top"},
		{"id":"52914aef1e3048ca","fromNode":"e8cd357ba577caec","fromSide":"bottom","toNode":"cf377f4c41855d76","toSide":"top"},
		{"id":"f5d7860ae49c7691","fromNode":"c4b87fb395abc5c2","fromSide":"right","toNode":"225c065c188768ea","toSide":"left"},
		{"id":"01f719ae29f75c2e","fromNode":"c4b87fb395abc5c2","fromSide":"right","toNode":"3265869955ee7e51","toSide":"left"}
	]
}